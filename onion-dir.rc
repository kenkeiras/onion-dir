#!/bin/sh -e

### BEGIN INIT INFO
# Provides:          onion-dir
# Required-Start:    $remote_fs
# Required-Stop:     $remote_fs
# Should-Start:      $network $syslog $tor
# Should-Stop:       $network $syslog $tor
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start and stop onion-dir
# Description:       Onion-dir is a Domain Name Server (DNS)
#                    to resolve names using a Tor proxy
### END INIT INFO

PATH=/sbin:/bin:/usr/sbin:/usr/bin

. /lib/lsb/init-functions
PIDFILE=/var/run/onion-dir/onion-dir.pid

wait_for_daemon() {
    pid="$1"
    sig="$2"
    if [ -n $pid ]; then
        sig=0
        n=1
        while kill -$sig $pid 2>/dev/null; do
            if [ $n -eq 1 ]; then
                echo "waiting for pid $pid to die"
            fi
            if [ $n -eq 11 ]; then
                echo "giving up on pid $pid with kill -0; trying -9"
                sig=9
            fi
            if [ $n -gt 20 ]; then
                echo "giving up on pid $pid"
                break
            fi
            n=$(($n+1))
            sleep 1
        done
    fi
}

check_network() {
    if [ -x /usr/bin/uname ] && [ "X$(/usr/bin/uname -o)" = XSolaris ]; then
        IFCONFIG_OPTS="-au"
    else
        IFCONFIG_OPTS=""
    fi
    if [ -z "$(/sbin/ifconfig $IFCONFIG_OPTS)" ]; then
       #log_action_msg "No networks configured."
       return 1
    fi
    return 0
}

case "$1" in
    start)
        log_daemon_msg "Starting domain name service..." "onion-dir"

        modprobe capability >/dev/null 2>&1 || true

        # dirs under /var/run can go away on reboots.
        mkdir -p /var/run/onion-dir
        chmod 775 /var/run/onion-dir
        chown root:onion-dir /var/run/onion-dir >/dev/null 2>&1 || true

        if [ ! -x /usr/sbin/onion-dir ]; then
            log_action_msg "onion-dir binary missing - not starting"
            log_end_msg 1
        fi

        if ! check_network; then
            log_action_msg "no networks configured"
            log_end_msg 1
        fi

        OPTIONS="-p $PIDFILE"
        if start-stop-daemon --start --oknodo --quiet --exec /usr/sbin/onion-dir \
                --pidfile ${PIDFILE} -- ${OPTIONS}; then
            if [ "X$RESOLVCONF" != "Xno" ] && [ -x /sbin/resolvconf ] ; then
                echo "nameserver 127.0.0.1" | /sbin/resolvconf -a lo.onion-dir
            fi
            log_end_msg 0
        else
            log_end_msg 1
        fi
    ;;

    stop)
        log_daemon_msg "Stopping domain name service..." "onion-dir"
        pid=`cat $PIDFILE 2>/dev/null` || true

        if test ! -f $PIDFILE -o -z "$pid"; then
            log_action_end_msg 0 "not running - there is no $PIDFILE"
            exit 0
        fi

        if start-stop-daemon --stop --signal INT --quiet --pidfile $PIDFILE; then
            wait_for_daemon $pid SIGINT
        elif kill -0 $pid 2>/dev/null; then
            log_action_end_msg 1 "Is $pid not onion-dir?  Is onion-dir a different binary now?"
        else
            log_action_end_msg 1 "Onion-dir died: process $pid not running; or permission denied"
        fi
        ;;

    restart)
        if ! check_network; then
            log_action_msg "no networks configured"
            exit 1
        fi

        $0 stop
        $0 start
    ;;

    status)
        ret=0
        status_of_proc -p ${PIDFILE} /usr/sbin/onion-dir onion-dir 2>/dev/null || ret=$?
        exit $ret
        ;;

    *)
        log_action_msg "Usage: /etc/init.d/onion-dir {start|stop|reload|restart|status}"
        exit 1
    ;;
esac

exit 0
